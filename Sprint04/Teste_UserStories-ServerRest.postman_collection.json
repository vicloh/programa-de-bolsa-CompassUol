{
	"info": {
		"_postman_id": "dd767147-2cb2-4928-a7e6-868e29bd2802",
		"name": "Teste_UserStories-ServerRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45899011",
		"_collection_link": "https://orange-sunset-1772387.postman.co/workspace/ServeRest~fc92c0aa-3575-4ce1-b609-32811a9ee65b/collection/45899011-dd767147-2cb2-4928-a7e6-868e29bd2802?action=share&source=collection_link&creator=45899011"
	},
	"item": [
		{
			"name": "US 001 - Usuários",
			"item": [
				{
					"name": "[POST] Cadastrar usuário com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste de Status Code\r",
									"pm.test(\"Status code é 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Teste de Contrato (Corpo da Resposta)\r",
									"pm.test(\"Valida a mensagem 'Cadastro realizado com sucesso'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Teste Funcional e de Integração (Salvar variáveis)\r",
									"pm.test(\"Salva as informações do usuário para os próximos testes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    if (jsonData._id) {\r",
									"        pm.collectionVariables.set(\"userId\", jsonData._id);\r",
									"    }\r",
									"    // Salva o e-mail e senha que foram ENVIADOS para usar no teste de login\r",
									"    pm.collectionVariables.set(\"userEmail\", requestBody.email);\r",
									"    pm.collectionVariables.set(\"userPassword\", requestBody.password);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"teste_{{$randomInt}}@qa.com.br\", // Evita gmail/hotmail\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Falha ao cadastrar com e-mail já utilizado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica Status Code 400 (Bad Request)\r",
									"pm.test(\"Status code é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Verifica a mensagem de erro específica\r",
									"pm.test(\"Valida a mensagem 'Este email já está sendo usado'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Usuário Duplicado\",\r\n  \"email\": \"{{userEmail}}\", // Variável salva no teste anterior\r\n  \"password\": \"password123\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Falha ao cadastrar com e-mail inválido (gmail/hotmail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// A API Serverest atualmente permite, mas o teste correto seria\r",
									"pm.test(\"Status code é 400 para e-mail de provedor não permitido\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"// E verificar a mensagem de erro esperada."
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Usuario Gmail\",\r\n  \"email\": \"teste@gmail.com\",\r\n  \"password\": \"password\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Falha ao cadastrar com senha curta/longa",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"belo@qa.com.br\",\r\n  \"password\": \"0\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] Listar todos os usuários",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] Buscar usuário por ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "0uxuPY0cbmQhpEz1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Atualizar usuário com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste de Status Code\r",
									"pm.test(\"Status code é 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Teste de Mensagem de Sucesso\r",
									"pm.test(\"Valida a mensagem 'Registro alterado com sucesso'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Fulano Editado da Silva\",\r\n  \"email\": \"fulano_editado_{{$randomInt}}@qa.com.br\",\r\n  \"password\": \"nova_senha\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Falha ao atualizar com e-mail já utilizado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste de Status Code de Erro\r",
									"pm.test(\"Status code é 400 (Bad Request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Teste de Mensagem de Erro\r",
									"pm.test(\"Valida a mensagem 'Este email já está sendo usado'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Tentativa de Conflito\",\r\n  \"email\": \"{{conflictUserEmail}}\",\r\n  \"password\": \"senha\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Falha ao deletar usuário inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste de Status Code\r",
									"pm.test(\"Status code é 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Teste de Mensagem de Falha (Nenhum registro excluído)\r",
									"pm.test(\"Valida a mensagem 'Nenhum registro excluído'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Nenhum registro excluído\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Deletar usuário com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste de Status Code\r",
									"pm.test(\"Status code é 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Teste de Mensagem de Sucesso\r",
									"pm.test(\"Valida a mensagem 'Registro excluído com sucesso'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "US 002 - Login",
			"item": [
				{
					"name": "[POST] Realizar login com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica Status Code 200 (OK)\r",
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica se o token foi gerado\r",
									"pm.test(\"A resposta contém um token de autorização\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.authorization).to.exist;\r",
									"    pm.expect(jsonData.authorization).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Salva o token para usar nos testes de Produtos\r",
									"pm.test(\"Salva o token de autorização\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    // Remove \"Bearer \" do início para salvar só o token\r",
									"    var authToken = jsonData.authorization.split(' ')[1];\r",
									"    pm.collectionVariables.set(\"authToken\", authToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Falha ao logar com usuário inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 401 (Unauthorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Valida mensagem 'Email e/ou senha inválidos'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"senhaerrada123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Falha ao logar com senha inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 401 (Unauthorized)\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Valida mensagem 'Email e/ou senha inválidos'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"senhaerrada123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "US 003 - Produtos",
			"item": [
				{
					"name": "[POST] Cadastrar produto com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida mensagem 'Cadastro realizado com sucesso'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Salva ID e nome para testes futuros (duplicidade, exclusão)\r",
									"pm.collectionVariables.set(\"productId\", pm.response.json()._id);\r",
									"pm.collectionVariables.set(\"productName\", JSON.parse(pm.request.body.raw).nome);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Produto de Teste {{$randomInt}}\",\r\n  \"preco\": 150,\r\n  \"descricao\": \"Produto para automação\",\r\n  \"quantidade\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Falha ao cadastrar produto com nome duplicado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400 (Bad Request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Valida mensagem 'Já existe produto com esse nome'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{productName}}\", // Usa o nome salvo no teste anterior\r\n  \"preco\": 200,\r\n  \"descricao\": \"Produto duplicado\",\r\n  \"quantidade\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Falha ao cadastrar produto sem token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{productName}}\", // Usa o nome salvo no teste anterior\r\n  \"preco\": 200,\r\n  \"descricao\": \"Produto duplicado\",\r\n  \"quantidade\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] Listar produtos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Atualizar produto com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste 1: Verificar se o status code é 200 (OK)\r",
									"// Usamos 200 OK porque estamos alterando um recurso que já existe.\r",
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Teste 2: Verificar a mensagem de sucesso da alteração\r",
									"pm.test(\"Valida a mensagem 'Registro alterado com sucesso'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Logitech MX Master 3S Editado\",\r\n  \"preco\": 650,\r\n  \"descricao\": \"Mouse sem fio ergonômico - Editado\",\r\n  \"quantidade\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Criar produto novo caso ID não exista",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste 1: Verificar se o status code é 201 (Created)\r",
									"// Usamos 201 Created porque um NOVO recurso foi criado.\r",
									"pm.test(\"Status code é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Teste 2: Verificar a mensagem de sucesso de CADASTRO\r",
									"pm.test(\"Valida a mensagem 'Cadastro realizado com sucesso'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Teste 3 (Opcional, mas recomendado): Salvar o ID do novo produto\r",
									"pm.test(\"Salva o _id do novo produto criado via PUT\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData._id) {\r",
									"        // Salva em uma variável diferente para não confundir com o fluxo principal\r",
									"        pm.collectionVariables.set(\"putCreatedProductId\", jsonData._id);\r",
									"        console.log(\"ID do produto criado via PUT: \" + jsonData._id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Produto Criado via PUT {{$randomInt}}\",\r\n  \"preco\": 123,\r\n  \"descricao\": \"Produto de teste criado com PUT\",\r\n  \"quantidade\": 50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/IDqueNAOexiste123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"IDqueNAOexiste123"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Falha ao excluir produto em carrinho (Cenário específico)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/produtos/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Excluir produto com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste 1: Verificar se o status code é 200 (OK)\r",
									"// 200 OK é o código padrão para uma operação DELETE bem-sucedida que retorna uma mensagem.\r",
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Teste 2: Verificar a mensagem de sucesso da exclusão\r",
									"pm.test(\"Valida a mensagem 'Registro excluído com sucesso'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Registro excluído com sucesso\");\r",
									"});\r",
									"\r",
									"// Teste 3 (Opcional, mas boa prática): Limpar as variáveis\r",
									"// Após deletar o produto, o ID dele não é mais válido. Podemos limpá-lo.\r",
									"pm.test(\"Limpa a variável do ID do produto\", function() {\r",
									"    pm.collectionVariables.unset(\"productId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{productId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userPassword",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "productName",
			"value": ""
		}
	]
}